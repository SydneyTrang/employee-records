/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.*;

/**
 * Filename: sTrangWk9EmployeeRecords
 *
 * Programmer: Sydney Trang
 *
 * Course: ICS4UE
 *
 * Date Started: Fri. Apr. 13/18
 *
 * Description: This program uses ArrayLists to add, list, and remove employee
 * information from and employee records application.
 *
 * Due Date: Sun. Apr. 15/18
 *
 * Modifications: Error handling for empty input fields. If records are empty
 * and list or remove button pressed displays message telling so. Nulls all text
 * fields after successful inputs. Error handling if the remove button is
 * pressed and the ID # inputted does not match an ID # in the records. Error
 * handling if the remove button is pressed and the ID # field is blank. Error
 * handling if user adds an ID # that matches another in the records.
 *
 * Finished: Sun. Apr. 15/18
 *
 */
public class sTrangWk9EmployeeRecords extends javax.swing.JFrame {

    ArrayList<Employees> records = new ArrayList();

    /**
     * Creates new form sTrangWk9EmployeeRecords
     */
    public sTrangWk9EmployeeRecords() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        title = new javax.swing.JLabel();
        idNumber = new javax.swing.JLabel();
        firsName = new javax.swing.JLabel();
        lastName = new javax.swing.JLabel();
        annualSalary = new javax.swing.JLabel();
        startDate = new javax.swing.JLabel();
        idNumberIn = new javax.swing.JTextField();
        firstNameIn = new javax.swing.JTextField();
        lastNameIn = new javax.swing.JTextField();
        annualSalaryIn = new javax.swing.JTextField();
        startDateIn = new javax.swing.JTextField();
        instructions = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        list = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeRecordsOut = new javax.swing.JTextArea();
        errorHandlingOut = new javax.swing.JTextField();
        exit = new javax.swing.JButton();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee Records");

        title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title.setForeground(new java.awt.Color(0, 51, 255));
        title.setText("Employee Records");
        title.setName(""); // NOI18N

        idNumber.setText("ID #:");

        firsName.setText("First Name");

        lastName.setText("Last Name");

        annualSalary.setText("Annual Salary");

        startDate.setText("Start Date");

        instructions.setText("Enter an ID # and press Remove to delete an employee's records.");

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        list.setText("List");
        list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listActionPerformed(evt);
            }
        });

        employeeRecordsOut.setColumns(20);
        employeeRecordsOut.setRows(5);
        jScrollPane1.setViewportView(employeeRecordsOut);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(errorHandlingOut)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(idNumber)
                                            .addComponent(firsName)
                                            .addComponent(lastName)
                                            .addComponent(annualSalary)
                                            .addComponent(startDate))
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(idNumberIn, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                            .addComponent(firstNameIn)
                                            .addComponent(lastNameIn)
                                            .addComponent(annualSalaryIn)
                                            .addComponent(startDateIn)))
                                    .addComponent(exit))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(instructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(add)
                                        .addGap(38, 38, 38)
                                        .addComponent(list)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(remove))
                                    .addComponent(jScrollPane1))))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idNumber)
                    .addComponent(idNumberIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instructions))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firsName)
                    .addComponent(add)
                    .addComponent(remove)
                    .addComponent(list))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(annualSalaryIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(annualSalary))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startDate)
                            .addComponent(startDateIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exit))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(errorHandlingOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* A method called when the add button is pressed. */
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        Employees employeeInfo;
        String sIDNumber, sFullName, sAnnualSalary, sStartDate;

        //Checks for empty fields
        if (idNumberIn.getText().isEmpty()
                || firstNameIn.getText().isEmpty()
                || lastNameIn.getText().isEmpty()
                || annualSalaryIn.getText().isEmpty()
                || startDateIn.getText().isEmpty()) {
            errorHandlingOut.setText("All fields must be filled in.");
        } else {
            //Gets input from user
            sIDNumber = idNumberIn.getText();
            sFullName = firstNameIn.getText() + " " + lastNameIn.getText();
            sAnnualSalary = annualSalaryIn.getText();
            sStartDate = startDateIn.getText();

            //employeeInfo is sent to the class Employees
            employeeInfo = new Employees(sIDNumber, sFullName, sAnnualSalary, sStartDate);
            records.add(employeeInfo); //adds new employee info to records ArrayList

            //Checks if an ID # inputted matches another in the records
            ////Subtract 1 so there is no ID comparison of the same object
            for (int x = 0; x < records.size() - 1; x++) {
                //If a match has been made
                if (idNumberIn.getText().equals(records.get(x).sIDNumber)) {
                    errorHandlingOut.setText("Invalid ID. The ID # inputted matches another ID # found in the records.");
                    records.remove(records.size() - 1);
                    break;  //Stops checking since an ID # match has been found
                } else if (x >= records.size() - 2) {
                    //Clears all input text fields except for the ID # to prepare for next entries
                    idNumberIn.setText(null);
                    firstNameIn.setText(null);
                    lastNameIn.setText(null);
                    annualSalaryIn.setText(null);
                    startDateIn.setText(null);
                    //Clears error handling field
                    errorHandlingOut.setText(null);
                }
            }

            //Special case where all fields aren't nulled after first successful input
            if (records.size() == 1) {
                //Clears all input text fields except for the ID # to prepare for next entries
                idNumberIn.setText(null);
                firstNameIn.setText(null);
                lastNameIn.setText(null);
                annualSalaryIn.setText(null);
                startDateIn.setText(null);
                //Clears error handling field
                errorHandlingOut.setText(null);
            }
        }
    }//GEN-LAST:event_addActionPerformed

    /* A method called when the list button is pressed. */
    private void listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listActionPerformed
        String sTemp = "";
        //Lists all employee information
        for (int x = 0; x < records.size(); x++) {
            sTemp += "Employee: " + records.get(x).sFullName + "\n"
                    + "ID #: " + records.get(x).sIDNumber + "\n"
                    + "Annual Salary: " + records.get(x).sAnnualSalary + "\n"
                    + "Start Date: " + records.get(x).sStartDate + "\n\n";
        }
        employeeRecordsOut.setText(sTemp);

        //If the records ArrayList is empty
        if (records.isEmpty()) {
            errorHandlingOut.setText("There are no employees in the records.");
        }
    }//GEN-LAST:event_listActionPerformed

    /* A method called when the remove button is pressed. */
    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        //If the ID # field is empty 
        if (idNumberIn.getText().isEmpty()) {
            errorHandlingOut.setText("Sorry, that ID # cannot be found.");
        }

        //If the records ArrayList is empty
        if (records.isEmpty()) {
            errorHandlingOut.setText("There are no employees in the records.");
        }

        //Checks if the ID inputed matches another in the records ArrayList
        for (int x = 0; x < records.size(); x++) {
            //The ID # inputted matches an ID # in the records
            if (idNumberIn.getText().equals(records.get(x).sIDNumber)) {
                records.remove(x); //Removes employee from records
                //Clears all input text fields to prepare for next entries
                idNumberIn.setText(null);
                firstNameIn.setText(null);
                lastNameIn.setText(null);
                annualSalaryIn.setText(null);
                startDateIn.setText(null);
                //Clears error handling 
                errorHandlingOut.setText(null);
                break; //Stops checking since an ID # match has been found   
            } else { //If there is not match
                errorHandlingOut.setText("Sorry, that ID # cannot be found.");
            }
        }
    }//GEN-LAST:event_removeActionPerformed

    /* A method called when the exit button is pressed. */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sTrangWk9EmployeeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sTrangWk9EmployeeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sTrangWk9EmployeeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sTrangWk9EmployeeRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sTrangWk9EmployeeRecords().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel annualSalary;
    private javax.swing.JTextField annualSalaryIn;
    private javax.swing.JTextArea employeeRecordsOut;
    private javax.swing.JTextField errorHandlingOut;
    private javax.swing.JButton exit;
    private javax.swing.JLabel firsName;
    private javax.swing.JTextField firstNameIn;
    private javax.swing.JLabel idNumber;
    private javax.swing.JTextField idNumberIn;
    private javax.swing.JLabel instructions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lastName;
    private javax.swing.JTextField lastNameIn;
    private javax.swing.JButton list;
    private javax.swing.JButton remove;
    private javax.swing.JLabel startDate;
    private javax.swing.JTextField startDateIn;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
